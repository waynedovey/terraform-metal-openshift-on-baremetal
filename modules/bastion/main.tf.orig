data "template_file" "userdata" {
  template = file("${path.module}/assets/userdata_${var.operating_system}.sh")
}

data "template_file" "ipxe_script" {
  depends_on = [metal_spot_market_request.lb]
  for_each   = toset(var.nodes)
  template   = file("${path.module}/assets/ipxe.tpl")

  vars = {
    node_type           = each.value
    bastion_ip          = data.metal_device.devs
    ocp_version         = var.ocp_version
    ocp_version_zstream = var.ocp_version_zstream
  }
}

data "template_file" "ignition_append" {
  depends_on = [metal_spot_market_request.lb]
  for_each   = toset(var.nodes)
  template   = file("${path.module}/assets/ignition-append.json.tpl")

  vars = {
    node_type          = each.value
    bastion_ip         = data.metal_device.devs
    cluster_name       = var.cluster_name
    cluster_basedomain = var.cluster_basedomain
  }
}

locals {
  arch           = "x86_64"
  coreos_baseurl = "http://54.172.173.155/pub/openshift-v4/dependencies/rhcos"
  coreos_url     = "${local.coreos_baseurl}/${var.ocp_version}/${var.ocp_version}.${var.ocp_version_zstream}"
  coreos_filenm  = "rhcos-${var.ocp_version}.${var.ocp_version_zstream}-${local.arch}"
  coreos_img     = "${local.coreos_filenm}-live-rootfs.${local.arch}.img"
  coreos_kernel  = "${local.coreos_filenm}-live-kernel-${local.arch}"
  coreos_initrd  = "${local.coreos_filenm}-live-initramfs.${local.arch}.img"

}


resource "metal_spot_market_request" "lb" {
  project_id    = var.project_id
  max_bid_price = 0.18
  facilities    = [var.facility]
  devices_min   = 1
  devices_max   = 1

  instance_parameters {
    hostname         = "lb-0.${var.cluster_name}.${var.cluster_basedomain}"
    billing_cycle    = var.billing_cycle
    operating_system = var.operating_system
    plan             = var.plan
    userdata         = data.template_file.userdata.rendered
  }
}


data "metal_spot_market_request" "dlb" {
  depends_on = [metal_spot_market_request.lb]
  request_id = metal_spot_market_request.lb.id
}
data "metal_device" "devs" {
  #count     = length(data.metal_spot_market_request.dlb.device_ids)
  depends_on = [metal_spot_market_request.lb]  
  count     = 1
  device_id = data.metal_spot_market_request.dlb.device_ids[count.index]
}

resource "null_resource" "dircheck" {

  provisioner "remote-exec" {

    connection {
      private_key = file(var.ssh_private_key_path)
      host        = data.metal_device.devs
    }


    inline = [
      "while [ ! -d /usr/share/nginx/html ]; do sleep 2; done; ls /usr/share/nginx/html/",
      "while [ ! -f /usr/lib/systemd/system/nfs-server.service ]; do sleep 2; done; ls /usr/lib/systemd/system/nfs-server.service"
    ]
  }
}

resource "null_resource" "ocp_install_ignition" {

  depends_on = [null_resource.dircheck]


  provisioner "remote-exec" {

    connection {
      private_key = file(var.ssh_private_key_path)
      host        = data.metal_device.devs
    }


    inline = [
      "curl -o /usr/share/nginx/html/${local.coreos_img} ${local.coreos_url}/${local.coreos_img}",
      "curl -o /usr/share/nginx/html/${local.coreos_kernel} ${local.coreos_url}/${local.coreos_kernel}",
      "curl -o /usr/share/nginx/html/${local.coreos_initrd} ${local.coreos_url}/${local.coreos_initrd}",
      "chmod -R 0755 /usr/share/nginx/html/"
    ]
  }
}

resource "null_resource" "ipxe_files" {

  depends_on = [null_resource.dircheck]
  for_each   = data.template_file.ipxe_script

  provisioner "file" {

    connection {
      private_key = file(var.ssh_private_key_path)
      host        = data.metal_device.devs
    }

    content     = each.value.rendered
    destination = "/usr/share/nginx/html/${each.key}.ipxe"
  }

  provisioner "remote-exec" {

    connection {
      private_key = file(var.ssh_private_key_path)
      host        = data.metal_device.devs
    }


    inline = [
      "chmod -R 0755 /usr/share/nginx/html/",
    ]
  }
}

resource "null_resource" "ignition_append_files" {

  depends_on = [null_resource.dircheck]
  for_each   = data.template_file.ignition_append

  provisioner "file" {

    connection {
      private_key = file(var.ssh_private_key_path)
      host        = data.metal_device.devs
    }

    content     = each.value.rendered
    destination = "/usr/share/nginx/html/${each.key}-append.ign"
  }

  provisioner "remote-exec" {

    connection {
      private_key = file(var.ssh_private_key_path)
      host        = data.metal_device.devs
    }


    inline = [
      "chmod -R 0755 /usr/share/nginx/html/",
    ]
  }
}
